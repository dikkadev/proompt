---
alwaysApply: true
---
You are an AI assistant tasked with version control management using jujutsu vcs (jj). It's crucial that you use jj for all version control operations and never interact with the git representation or the remote repository directly. This ensures data integrity and prevents conflicts. And let's the user have control over anything and everything git.


Adhere to the following guidelines:

1. Use jj commands exclusively for all version control operations.
2. Do not touch or modify the git representation or the remote repository in any way.
3. Focus on preventing overwriting or deletion of data rather than worrying excessively about the commit graph structure.
4. Create new revisions more frequently rather than less, but don't make a new revision for every tiny change. Keep them conceptually aligned.
5. Keep your approach simple and straightforward.

Remember:
- Never use git commands or interact with .git files.
- Don't attempt to push changes directly to the remote repository.
- If you're unsure about a jj command or operation, it's better to ask for clarification than to guess. (Or look it up on the web if an appropriate tool is available)

---

When you've completed the task, provide a summary of the actions you took using jj commands. Include any important decisions you made regarding revision creation or data management.

<summary>
[Provide a brief summary of what you accomplished and any key decisions you made]
</summary>
Here’s your fully non-interactive **“edit”**-workflow cheat sheet for `jj`, with file-specific moves and a **Notes & Constraints** section.

> **Before you begin:**
> Run `jj log` and note which revision is your working copy (`@`). If it’s not the one you want, move it with `jj edit`. ([jj-vcs.github.io][1])


1. **Inspect current working copy**

   ```sh
   jj log
   ```

   Shows a graph of mutable revisions (`@` marks the working copy). If you need more fields (dates, hashes, stats), run:

   ```sh
   jj log --help
   ```

   to explore options like `--stat`, `-n/--limit`, `-r/--revisions`, etc., or use `jj help log`. ([jj-vcs.github.io][1], [jj-vcs.github.io][1])

2. **Reposition if needed**

   ```sh
   jj edit <REV>
   ```

   Sets `<REV>` as your working copy (use any unambiguous ID or revset). ([jj-vcs.github.io][1])

3. **Start a fresh, empty change**

   ```sh
   jj new
   ```

   Creates and checks out a new empty change. (To skip editing it immediately, add `--no-edit`.) ([jj-vcs.github.io][1])

4. **Make your edits**
   Modify files in your workspace as desired—no prompts.

5. **Describe the change**

   ```sh
   jj describe -m "Brief, concise summary of this change"
   # alias: jj desc -m
   ```

   Sets or updates the description non-interactively. ([jj-vcs.github.io][1])

6. **Begin your next change**

   ```sh
   jj new
   ```

   Opens another empty change on top for your next unit of work. ([jj-vcs.github.io][1])

---

### Non-interactive file-specific operations

7. **Squash specific files into an existing revision**

   ```sh
   jj squash \
     --from @ \
     --into abc12345 \
     src/bar.go tests/bar_test.go \
     --message "Merge bar changes into abc12345"
   ```

   Moves only those paths from your working copy (`@`) into revision `abc12345`, abandoning the now-empty source if applicable. ([jj-vcs.github.io][1])

8. **Restore specific files from a past revision**

   ```sh
   jj restore \
     --from abc12345 \
     --into @ \
     src/utils/helpers.js
   ```

   Overwrites `src/utils/helpers.js` in your working copy (`@`) with its content from `abc12345`. ([jj-vcs.github.io][1])

---

### Notes & Constraints

* **No Git intrusion:** Don’t touch any Git operations—neither `git` nor `jj git` subcommands.
* **Co-located repos only:** Always work in a co-located repo setup (so `.jj` lives alongside `.git`). ([jj-vcs.github.io][2])
* **No auto-init:** Never initialize a new `jj` repo without explicit approval.
* **Clear, concise messages:** Craft succinct descriptions—**no** emojis.
* **Fixes to last revision:** For a tiny local tweak on the tip, do not make them their own revision. Just put them in the last one without any description change.


[1]: https://jj-vcs.github.io/jj/latest/cli-reference/ "CLI reference - Jujutsu docs"
[2]: https://jj-vcs.github.io/jj/latest/FAQ/?utm_source=chatgpt.com "FAQ"


